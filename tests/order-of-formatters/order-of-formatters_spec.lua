local plugin = require("order-of-formatters")

describe("setup", function()
  it("adds the default formatters", function()
    plugin.reset()
    plugin.setup({ default_formatters = { { filetype = "lua", order = 1, command = "lua-format" } } })
    assert(#plugin.get_format_options() == 1, "format options has one element")
  end)
end)

describe("reset", function()
  it("cleans format options", function()
    plugin.reset()
    plugin.setup({ default_formatters = { { filetype = "lua", order = 1, command = "lua-format" } } })
    assert(#plugin.get_format_options() == 1, "format options has one element")
    plugin.reset()
    assert(#plugin.get_format_options() == 0, "format options is empty")
  end)
end)

describe("register", function()
  before_each(function()
    plugin.reset()
  end)

  it("register adds options to the format options", function()
    assert(#plugin.get_format_options() == 0, "format options is empty")
    plugin.register({ filetype = "lua", order = 1, command = "lua-format" })
    assert(#plugin.get_format_options() == 1, "format options has one element")
  end)
end)

describe("execute", function()
  local spy = require("luassert.spy")
  local s = spy.new(function() end)

  -- Register vim commands using the spy
  vim.api.nvim_create_user_command("Test", function()
    s()
  end, {})
  vim.api.nvim_create_user_command("Test2", function()
    s()
  end, {})

  before_each(function()
    plugin.reset()
  end)

  it("executes the command", function()
    plugin.register({ filetype = "lua", order = 1, command = "Test" })
    plugin.register({ filetype = "lua", order = 2, command = "Test2" })
    plugin.execute("lua")
    assert.spy(s).was_called(2)
  end)
end)
